name: Build push image and generate chart 
on:
  push:
    branches:
      - main
jobs:
  bump-ver-push-tag:
    name: Bump version and push tag 
    runs-on: ubuntu-latest
    outputs:
        tag: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - name: Checkout   
        uses: actions/checkout@v3
      
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: "" 
  
  docker-lint:
    name: Docker Lint
    needs: bump-ver-push-tag
    runs-on: ubuntu-latest
    steps: 
      - name: Checkecout
        uses: actions/checkout@v3

      - name: Docker Lint
        uses: luke142367/Docker-Lint-Action@v1.1.1
        with:
          target: ./wordpress/Dockerfile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  

  build-and-push-image:
    name: Build and push image 
    needs: [bump-ver-push-tag, docker-lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkecout
        uses: actions/checkout@v3
      
      - name: Login to the Container registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./wordpress
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/wordpress:${{ needs.bump-ver-push-tag.outputs.tag }}
  
  generate-chart:
    name: Generate Chart
    needs: bump-ver-push-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkecout
        uses: actions/checkout@v3

      - name: Update appVersion & Chart version
        run: |
          sed -i "s/^version:.*$/version: ${{ needs.bump-ver-push-tag.outputs.tag }}/" ./charts/wordpress/Chart.yaml
          sed -i "s/^appVersion:.*$/appVersion: ${{ needs.bump-ver-push-tag.outputs.tag }}/" ./charts/wordpress/Chart.yaml

      - name: Commit changes
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git add .
          git commit -m "Update Chart to ${{ needs.bump-ver-push-tag.outputs.tag }} by GitHub Actions"
          git push origin main
  
  lint-helm:
    name: Helm Lint
    needs: generate-chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Helm
        uses: Azure/setup-helm@v3
        with:
          version: v3.10.0

      - name: Helm lint
        run: |
          helm lint ./charts/wordpress              
  
  chart-release:
    name: Chart release
    needs: [bump-ver-push-tag, lint-helm]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: 'main'
          path: 'main'

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: 'gh-pages'
          path: 'gh-pages'

      - name: Install Helm
        uses: Azure/setup-helm@v3
        with:
          version: v3.10.0

      - name: Sync Repo
        run: cd main && sh package.sh

      - name: Move folder
        run: |
          mv main/gh-pages/* gh-pages
          cd gh-pages
          helm repo index --url https://tony-by.github.io/wordpress-ci/ --merge index.yaml .
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git add .
          git diff --quiet && git diff --staged --quiet || git commit -m "Chart release ${{ needs.bump-ver-push-tag.outputs.tag }}" -m "${{ github.event.head_commit.message }}"       
          git push
  
  # slackNotification:
  #   name: Slack notofication
  #   if: always()
  #   needs: [bump-ver-push-tag, build-and-push-image, chart-release]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Slack Notify
  #     uses: rtCamp/action-slack-notify@v2.2.0
  #     env:
  #         SLACK_CHANNEL: notifications
  #         SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '
  #         SLACK_ICON: https://github.com/rtCamp.png?size=48
  #         SLACK_MESSAGE: 'Wordpress release v${{ needs.bump-ver-push-tag.outputs.tag }} Status: ${{ job.status }} :rocket:'
  #         SLACK_TITLE: Chart Release
  #         SLACK_USERNAME: rtCamp
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  slackNotification:
    name: Slack notofication
    if: always()
    needs:
       - bump-ver-push-tag
       - docker-lint
       - build-and-push-image
       - generate-chart
       - lint-helm
       - chart-release
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Slack message
        id: status
        uses: actions/github-script@v6.3.1
        with:
          script: |
            ////////////////////////////////////
            // retrieve workflow run data
            ////////////////////////////////////
            console.log("get workflow run")
            const wf_run = await github.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{ github.run_id }}
            })
            console.log(wf_run.data)
            console.log("get jobs for workflow run:", wf_run.data.jobs_url)
            const jobs_response = await github.request(wf_run.data.jobs_url)
            ////////////////////////////////////
            // build slack notification message
            ////////////////////////////////////
            // some utility functions
            var date_diff_func = function(start, end) {
                var duration = end - start
                // format the duration
                var delta = duration / 1000
                var days = Math.floor(delta / 86400)
                delta -= days * 86400
                var hours = Math.floor(delta / 3600) % 24
                delta -= hours * 3600
                var minutes = Math.floor(delta / 60) % 60
                delta -= minutes * 60
                var seconds = Math.floor(delta % 60)
                var format_func = function(v, text, check) {
                    if (v <= 0 && check) {
                        return ""
                    } else {
                        return v + text
                    }
                }
                return format_func(days, "d", true) + format_func(hours, "h", true) + format_func(minutes, "m", true) + format_func(seconds, "s", false)
            }
            var status_icon_func = function(s) {
                switch (s) {
                case "w_success":
                    return ":white_check_mark:"
                case "w_failure":
                    return ":no_entry:"
                case "w_cancelled":
                    return ":warning:"
                case "success":
                    return "\u2713"
                case "failure":
                    return "\u2717"
                default:
                    return "\u20e0"
                }
            }
            const commit = "${{ github.sha }}".substr(0, 6)
            var pr = ""
            for (p of wf_run.data.pull_requests) {
              pr += ",<"+ p.url + "|#" + p.number + ">"
            }
            if (pr != "") {
              pr = "for " + pr.substr(1)
            }
            // build the message
            var fields = []
            var is_wf_success = true
            var is_wf_failure = false
            for (j of jobs_response.data.jobs) {
                console.log(j.name, ":", j.status, j.conclusion, j.started_at, j.completed_at)
                // ignore the current job running this script
                if (j.status != "completed") {
                    continue
                }
                if (j.conclusion != "success") {
                  is_wf_success = false
                }
                if (j.conclusion == "failure") {
                  is_wf_failure = true
                }
                fields.push({
                    type: "mrkdwn",
                    text: status_icon_func(j.conclusion) + " <" + j.html_url + "|" + j.name + ">\n  \u21b3 completed in " + date_diff_func(new Date(j.started_at), new Date(j.completed_at))
                })
            }
            var workflow_status = "w_cancelled"
            if (is_wf_success) {
              workflow_status = "w_success"
            } else if (is_wf_failure) {
              workflow_status = "w_failure"
            }
            var slack_msg = {
                blocks: [
                    {
                        type: "section",
                        text: {
                            type: "mrkdwn",
                            text: "<https://github.com/${{ github.repository }}|*${{ github.repository }}*>\nfrom *${{ github.ref }}@" + commit + "*"\nRelease version: v${{ needs.bump-ver-push-tag.outputs.tag }}
                        }
                    },
                    {
                        type: "section",
                        text: {
                            type: "mrkdwn",
                            text: status_icon_func(workflow_status) + " *${{ github.workflow }}* " + pr + "\nWorkflow run <" + wf_run.data.html_url + "|#${{ github.run_number }}> completed in " + date_diff_func(new Date(wf_run.data.created_at), new Date(wf_run.data.updated_at))
                        }
                    },
                    {
                        type: "divider"
                    },
                    {
                        type: "section",
                        fields: fields
                    }
                ]
            }
            return slack_msg
      - name: Send to Slack
        if: always()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK }} -H "Content-type: application/json" --data '${{ steps.status.outputs.result }}'
           
